using System.Globalization;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace ChromaListe.Generator;

[Generator]
public class PokemonGenerator : ISourceGenerator
{
    private static readonly Dictionary<string, List<string>> Groups = new()
    {
        ["Regi"] = ["377", "378", "379", "486", "894", "895"],
        ["Starter"] = ["1", "4", "7", "152", "155", "158", "252", "255", "258", "387", "390", "393", "495", "498", "501", "650", "653", "656", "722", "725", "728", "810", "813", "816", "906", "909", "912"],
        ["Fossil"] = ["138", "139", "140", "141", "142", "345", "346", "347", "348", "408", "409", "410", "411", "564", "565", "566", "567", "696", "697", "698", "699", "880", "881", "882", "883"],
        ["Pikalike"] = ["25", "26", "26a", "172", "311", "312", "417", "587", "702", "777", "877", "921", "922", "923"],
        ["Eevee"] = ["133", "134", "135", "136", "196", "197", "470", "471", "700"],
        ["UltraBeast"] = ["793", "794", "795", "796", "797", "798", "799", "803", "804", "805", "806"],
        ["FakeRegional"] = ["948", "949", "960", "961", "1012", "1013"],
    };

    public void Execute(GeneratorExecutionContext context)
    {
        StringBuilder sourceBuilder = new(@"// <auto-generated />
using System.Collections.Generic;

namespace ChromaListe.Web.Core;

public sealed partial record Pokemon
{
    private static readonly IReadOnlyDictionary<string, Pokemon> PokemonList = new Dictionary<string, Pokemon>
    {
");
        foreach (string line in GetPokemons(context))
        {
            sourceBuilder.AppendLine(line);
        }

        sourceBuilder.Append(@"    };
}");
        context.AddSource("Pokemon.Generated.cs", sourceBuilder.ToString());
    }

    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization needed.
    }

    private static List<string> GetPokemons(GeneratorExecutionContext context)
    {
        AdditionalText? file = context.AdditionalFiles.FirstOrDefault(at => Path.GetExtension(at.Path).Equals(".csv", StringComparison.OrdinalIgnoreCase));
        if (file is null)
        {
            context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor(
                "CL0001",
                "Couldn't find csv file",
                "Couldn't find csv file",
                "Usage",
                DiagnosticSeverity.Error,
                true), null));
            return [];
        }

        SourceText? content = file.GetText(context.CancellationToken);

        if (content is null)
        {
            context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor(
                "CL0002",
                "Couldn't read csv file",
                "Couldn't read csv file",
                "Usage",
                DiagnosticSeverity.Error,
                true), null));
            return [];
        }

        IEnumerable<PokemonData>? pokemons = content
            .ToString()
            .Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
            .Where(l => !string.IsNullOrWhiteSpace(l))
            .Select(LineToData);

        List<string> generatedLines = [];
        foreach (PokemonData pokemon in pokemons)
        {
            IEnumerable<string> groupsForPokemon = Groups.Where(x => x.Value.Contains(pokemon.DisplayNumber)).Select(x => $"Groups.{x.Key}");
            var groupsString = new StringBuilder(pokemon.PrimaryGroup);
            if (groupsForPokemon.Any())
            {
                groupsString.Append(" | ").Append(string.Join(" | ", groupsForPokemon));
            }

            foreach (string tag in pokemon.Tags)
            {
                groupsString.Append(" | Groups.").Append(tag!.Replace(" ", "").Replace("-", ""));
            }

            string line = $@"        [""{pokemon.DisplayNumber}""] = new Pokemon(""{pokemon.DisplayNumber}"", ""{pokemon.DisplayName}"", {groupsString}, {pokemon.SpeciesNumber}),";
            generatedLines.Add(line);
        }

        return generatedLines;
    }

    private static PokemonData LineToData(string line)
    {
        string[]? splittedLine = line.Split(',');
        return new PokemonData(
            int.Parse(splittedLine[0], NumberStyles.Integer, CultureInfo.InvariantCulture),
            splittedLine[1],
            splittedLine[2],
            splittedLine[3],
            splittedLine[4],
            splittedLine[5].Split(new[] { '|' }, StringSplitOptions.RemoveEmptyEntries),
            int.Parse(splittedLine[6], NumberStyles.Integer, CultureInfo.InvariantCulture));
    }
}
