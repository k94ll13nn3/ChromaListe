---
NoTitle:
---

@{
    IList<PostData> caughtPokemon = Context.GetPosts();
}

<div class="page-title">
    <div class="page-title__text">Table de capture</div>
    <div class="page-title__subtitle">Cible potentielle : <span id="nextTarget"></span></div>
</div>

@foreach (Groups group in new[] { Groups.Generation1, Groups.Generation2, Groups.Generation3, Groups.Generation4, Groups.Generation5, Groups.Generation6, Groups.Generation7, Groups.Generation8, Groups.Generation9, Groups.Alola, Groups.Galar, Groups.Hisui, Groups.Paldea })
{
    IReadOnlyCollection<Pokemon> pokemonInGroup = Pokemon.GetAll(group);
    var percent = pokemonInGroup.Count(x => caughtPokemon.Any(p => p.Number == x.Number)) * 100.0 / pokemonInGroup.Count;

    <h1>@group.GetDescription() (@pokemonInGroup.Count(x => caughtPokemon.Any(p => p.Number == x.Number))/@pokemonInGroup.Count - @string.Format("{0:0.0}%", percent))</h1>
    <div class="container">
        @foreach (Pokemon pokemon in pokemonInGroup)
        {
            var icon = Context.GetLink($"/assets/img/icons/{pokemon.PaddedNumber}.png");
            var post = caughtPokemon.OrderBy(p => p.CatchDate).FirstOrDefault(p => p.Number == pokemon.Number);
            var count = caughtPokemon.Count(p => p.Number == pokemon.Number);
            var isEvolved = caughtPokemon.Count(p => p.Number == pokemon.Number && p.CaughtAs != null) == count;
            if (post != null)
            {
                <a title="@pokemon.Name" href="@Context.GetLink("/")@post.WritePath" style="position: relative">
                    <img class="pokemon-icon" src="@icon" loading="lazy" alt="Image of captured shiny @pokemon.Name" />
                    @if (count > 1)
                    {
                        <div class="badge-number">@count</div>
                    }
                    @if (isEvolved)
                    {
                        <div class="badge-number-left">üî∫</div>
                    }
                </a>
            }
            else
            {
                string[] games = new string[] { "LGP", "LGE", "SW", "SH", "BD", "SP", "PLA", "SC", "VI" };
                var data = Json.Serialize(games.Select(g => new
                {
                    src = $"/ChromaListe/assets/img/games/{g}.png",
                    alt = g,
                    badge = pokemon.Games[g] == 2 ? "‚úîÔ∏è" : "",
                    caught = pokemon.Games[g] == 0 ? " not-caught" : "",
                }).ToList());

                <div style="position: relative" class="with-tooltip" data-tooltip='@data'>
                    <img class="pokemon-icon not-caught" src="@icon" title="@pokemon.Name" loading="lazy" alt="Image of shiny @pokemon.Name" />
                    @if (pokemon.Groups.HasFlag(Groups.Locked))
                    {
                        <div class="badge-number">‚ùå</div>
                    }
                </div>
            }
        }
    </div>
}

@section Scripts {
    <script type="text/javascript">
        function randomizeNextTarget() {
        @{
                var uncaught = Pokemon.GetAll().Where(x => !caughtPokemon.Select(y => y.Number).Contains(x.Number));
        }
            var unchaughtNumbers = [@Html.Raw(string.Join(",", uncaught.Select(x => $"\"{x.Number}\"")))];
            var unchaughtNames = [@Html.Raw(string.Join(",", uncaught.Select(x => $"\"{x.Name}\"")))];
            var randomIndex = Math.floor(Math.random() * unchaughtNumbers.length);
            $("#nextTarget").html(unchaughtNumbers[randomIndex] + ' - ' + unchaughtNames[randomIndex]);
        }

        $(document).ready(function () {
            randomizeNextTarget();
        });


        // Create single tooltip instance
        const globalTooltip = document.createElement('div');
        globalTooltip.classList.add('tooltip-wrapper');
        const tooltipContent = document.createElement('div');
        tooltipContent.classList.add('tooltip-content');
        globalTooltip.appendChild(tooltipContent);
        document.body.appendChild(globalTooltip);

        globalTooltip.style.position = 'absolute';
        globalTooltip.style.display = 'none';
        globalTooltip.style.zIndex = '9999';

        // Function to build tooltip content
        function populateTooltip(data) {
            tooltipContent.innerHTML = ''; // Clear previous content

            data.forEach(item => {
                const div = document.createElement('div');
                div.style.position = 'relative';

                const img = document.createElement('img');
                img.className = 'pokemon-icon' + (item.caught);
                img.src = item.src;
                img.alt = item.alt;
                img.loading = 'lazy';

                div.appendChild(img);

                if (item.badge) {
                    const badge = document.createElement('div');
                    badge.classList.add('badge-number');
                    badge.textContent = item.badge;
                    div.appendChild(badge);
                }

                tooltipContent.appendChild(div);
            });
        }

        // Attach events to all targets
        document.querySelectorAll('.with-tooltip').forEach(el => {
            el.addEventListener('mouseenter', (e) => {
                const data = JSON.parse(el.dataset.tooltip);
                populateTooltip(data);

                const rect = el.getBoundingClientRect();
                globalTooltip.style.left = `${rect.left + window.scrollX}px`;
                globalTooltip.style.top = `${rect.bottom + window.scrollY}px`;

                globalTooltip.style.display = 'block';
            });

            el.addEventListener('mouseleave', () => {
                globalTooltip.style.display = 'none';
            });
        });
    </script>
}
