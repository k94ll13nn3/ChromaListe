---
NoTitle:
---

@{
    var nbPkmsTotal = Pokemon.PokemonCount;
    var nbPkmsDistinct = Context.GetPosts().Select(x => x.Number).Distinct().Count();
    var nbPkms = Context.GetPosts().Count();
    var percent = nbPkmsDistinct * 100.0 / nbPkmsTotal;
}

<div class="page-title">
    <div class="page-title__text">Statistiques</div>
    <div class="page-title__subtitle">Pokémon chromatiques : @nbPkmsDistinct/@nbPkms (@string.Format("{0:0.0}%", percent) des @nbPkmsTotal)</div>
</div>

<h2>Méthode</h2>

<table class="charts-css column show-labels show-primary-axis data-spacing-10">
    <thead>
        <tr>
            <th scope="col"> Méthode </th>
            <th scope="col"> Pourcentage </th>
        </tr>
    </thead>
    <tbody>
        @{
            var categories = Context.GetPosts()
            .GroupBy(x => x.Category)
            .OrderByDescending(x => x.Count())
            .ThenBy(x => x.Key.GetDescription())
            .Select(x => (key: x.Key, count: x.Count()));
            var maxCategoryCount = categories.MaxBy(c => c.count).count;
            foreach (var category in categories)
            {
                <tr>
                    <th scope="row" style="white-space: pre-line"> @category.key.GetDescription(true) </th>
                    <td style="--size: calc( @category.count / @maxCategoryCount );"><span class="tooltip"> @category.count </span></td>
                </tr>
            }
        }
    </tbody>
</table>

<h2>Version</h2>

<table class="charts-css column show-labels show-primary-axis data-spacing-10">
    <thead>
        <tr>
            <th scope="col"> Méthode </th>
            <th scope="col"> Pourcentage </th>
        </tr>
    </thead>
    <tbody>
        @{
            var versions = Context.GetPosts()
            .GroupBy(x => x.Version)
            .OrderByDescending(x => x.Count())
            .ThenBy(x => x.Key.GetDescription())
            .Select(x => (key: x.Key, count: x.Count()));
            var maxVersionCount = versions.MaxBy(c => c.count).count;
            foreach (var version in versions)
            {
                <tr>
                    <th scope="row" style="white-space: pre-line"> @version.key.GetDescription(true) </th>
                    <td style="--size: calc( @version.count / @maxVersionCount );"><span class="tooltip"> @version.count </span></td>
                </tr>
            }
        }
    </tbody>
</table>

<h2>Année</h2>

<table class="charts-css column show-labels show-primary-axis data-spacing-10">
    <thead>
        <tr>
            <th scope="col"> Méthode </th>
            <th scope="col"> Pourcentage </th>
        </tr>
    </thead>
    <tbody>
        @{
            var years = Context.GetPosts()
            .GroupBy(x => x.CatchDate.Year)
            .OrderByDescending(x => x.Count())
            .Select(x => (key: x.Key, count: x.Count()));
            var maxYearCount = years.MaxBy(c => c.count).count;
            foreach (var year in years)
            {
                <tr>
                    <th scope="row" style="white-space: pre-line"> @year.key </th>
                    <td style="--size: calc( @year.count / @maxYearCount );"><span class="tooltip"> @year.count </span></td>
                </tr>
            }
        }
    </tbody>
</table>

<h2>Meilleurs mois</h2>

<table class="charts-css column show-labels show-primary-axis data-spacing-10">
    <thead>
        <tr>
            <th scope="col"> Méthode </th>
            <th scope="col"> Pourcentage </th>
        </tr>
    </thead>
    <tbody>
        @{
            var months = Context.GetPosts()
            .GroupBy(x => x.CatchDate.ToString("MMMM\nyyyy"))
            .OrderByDescending(x => x.Count())
            .Select(x => (key: x.Key, count: x.Count()));
            var maxMonthCount = months.MaxBy(c => c.count).count;
            foreach (var month in months.Take(10))
            {
                <tr>
                    <th scope="row" style="white-space: pre-line"> @month.key </th>
                    <td style="--size: calc( @month.count / @maxMonthCount );"><span class="tooltip"> @month.count </span></td>
                </tr>
            }
        }
    </tbody>
</table>

<h2>Ball</h2>

<table class="charts-css column show-labels show-primary-axis data-spacing-10">
    <thead>
        <tr>
            <th scope="col"> Méthode </th>
            <th scope="col"> Pourcentage </th>
        </tr>
    </thead>
    <tbody>
        @{
            var balls = Context.GetPosts()
            .GroupBy(x => x.Ball)
            .OrderByDescending(x => x.Count())
            .Select(x => (key: x.Key, count: x.Count()));
            var maxBallCount = balls.MaxBy(c => c.count).count;
            foreach (var ball in balls)
            {
                var ballImage = Context.GetLink($"/assets/img/balls/{ball.key.ToString().ToLowerInvariant()}.png");
                <tr>
                    <th scope="row" style="white-space: pre-line">
                        <span class="text">
                            <img class="ball-icon" src="@ballImage" alt="@ball.key.GetDescription()" title="@ball.key.GetDescription()" />
                        </span>
                    </th>
                    <td style="--size: calc( @ball.count / @maxBallCount );"><span class="tooltip"> @ball.count </span></td>
                </tr>
            }
        }
    </tbody>
</table>

<h2>Graph</h2>

@foreach (var year in Context.GetPosts().GroupBy(x => x.CatchDate.Year).OrderByDescending(x => x.Key).Select(g => g.Key))
{
    <h3>@year</h3>

    <div style="display:flex">
        <activity-graph class="letterboxd"
                        id="@($"activity-graph-{year}")"
                        style="margin:auto"
                        weekday-headers="short"
                        month-limits="late"
                        lang="fr"
                        week-start-day="1"
                        start-date="@($"{year}-01-01")"
                        end-date="@($"{year}-12-31")"></activity-graph>
    </div>
}

@section Scripts {
    <script type="module">
        @{
        var catchByYears = Context.GetPosts()
            .GroupBy(x => x.CatchDate.Year)
            .Select(g => g.GroupBy(x => x.CatchDate).ToDictionary(
                x => x.Key.ToString("yyyy-MM-dd"),
                x => new { parts = new List<string> { $"day--data-{(x.Count() >= 4 ? 4 : x.Count())}" }, title = $"{x.Count()} shiny(s)" }));
        }

        @foreach (var catchYear in catchByYears)
        {
            @Html.Raw($"document.querySelector('#activity-graph-{catchYear.First().Key[..4]}').data = {Json.Serialize(catchYear)};")
        }
    </script>
}
