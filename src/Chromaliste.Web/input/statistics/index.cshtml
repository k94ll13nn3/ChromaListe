---
title: Statistiques
---

@{
    var nbDocs = Context.Outputs["Posts"].Count();
}

<h2>Méthode</h2>

<dl>
@{
    var categories = Context.Outputs["Posts"]
        .GroupBy(x => (string)x["Category"])
        .OrderByDescending(x => x.Count())
        .Select(x => new {key = x.Key, count = x.Count()});
    foreach(var category in categories)
    {
        var percent = category.count * 1000 / nbDocs;
        var countString = $"({category.count})".PadLeft(4, ' ');
        <dd class="percentage percentage-@percent"><span class="text">@category.key @countString</span></dd>
    }
}
</dl>

<h2>Version</h2>

<dl>
@{
    var versions = Context.Outputs["Posts"]
        .GroupBy(x => (string)x["Version"])
        .OrderByDescending(x => x.Count())
        .Select(x => new {key = x.Key, count = x.Count()});
    foreach(var version in versions)
    {
        var percent = version.count * 1000 / nbDocs;
        var countString = $"({version.count})".PadLeft(4, ' ');
        <dd class="percentage percentage-@percent"><span class="text">@version.key @countString</span></dd>
    }
}
</dl>

<h2>Année</h2>

<dl>
@{
    var years = Context.Outputs["Posts"]
        .GroupBy(x => DateTime.Parse((string)x["Date"]).Year)
        .OrderByDescending(x => x.Count())
        .Select(x => new {key = x.Key, count = x.Count()});
    foreach(var year in years)
    {
        var percent = year.count * 1000 / nbDocs;
        var countString = $"({year.count})".PadLeft(4, ' ');
        <dd class="percentage percentage-@percent"><span class="text">@year.key @countString</span></dd>
    }
}
</dl>

<h2>Meilleurs mois</h2>

<dl>
@{

    var months  = Context.Outputs["Posts"]
        .GroupBy(x => DateTime.Parse((string)x["Date"]).ToString("MMMM yyyy"))
        .OrderByDescending(x => x.Count())
        .Select(x => new {key = x.Key, count = x.Count()});

    foreach(var month in months.Take(5))
    {
        var percent = month.count * 10;
        var countString = $"({month.count})".PadLeft(4, ' ');
        <dd class="percentage percentage-@percent"><span class="text">@month.key @countString</span></dd>
    }
}
</dl>

<h2>Ball</h2>

<dl>
@{
    var balls = Context.Outputs["Posts"]
        .GroupBy(x => (string)x["Ball"])
        .OrderByDescending(x => x.Count())
        .Select(x => new {key = x.Key, count = x.Count()});

    foreach(var ball in balls)
    {
        var percent = ball.count * 1000 / nbDocs;
        var countString = $"({ball.count})".PadLeft(4, ' ');
        <dd class="percentage percentage-@percent"><span class="text"><span id="icon__@ball.key" class="pkspr pokeball-@ball.key custom-pkspr-ball"></span> @countString</span></dd>
        <script type="text/javascript">PkSpr.decorate('icon__@ball.key');</script>
    }
}
</dl>