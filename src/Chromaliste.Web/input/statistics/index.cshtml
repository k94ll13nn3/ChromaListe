---
Title: Statistiques
---

@{
    var nbDocs = Context.Outputs.FromPipeline(nameof(Posts)).Count();
}

<h2>Méthode</h2>

<dl>
    @{
        var categories = Context.Outputs.FromPipeline(nameof(Posts))
            .GroupBy(x => (string)x[CustomKeys.Category])
        .OrderByDescending(x => x.Count())
        .Select(x => new { key = x.Key, count = x.Count() });
        foreach (var category in categories)
        {
            var percent = category.count * 1000 / nbDocs;
            var countString = $"({category.count})".PadLeft(4, ' ');
            <dd class="percentage percentage-@percent"><span class="text">@category.key @countString</span></dd>
        }
    }
</dl>

<h2>Version</h2>

<dl>
    @{
        var versions = Context.Outputs.FromPipeline(nameof(Posts))
            .GroupBy(x => (string)x[CustomKeys.Version])
        .OrderByDescending(x => x.Count())
        .Select(x => new { key = x.Key, count = x.Count() });
        foreach (var version in versions)
        {
            var percent = version.count * 1000 / nbDocs;
            var countString = $"({version.count})".PadLeft(4, ' ');
            <dd class="percentage percentage-@percent"><span class="text">@version.key @countString</span></dd>
        }
    }
</dl>

<h2>Année</h2>

<dl>
    @{
        var years = Context.Outputs.FromPipeline(nameof(Posts))
            .GroupBy(x => DateTime.Parse((string)x[CustomKeys.Date]).Year)
        .OrderByDescending(x => x.Count())
        .Select(x => new { key = x.Key, count = x.Count() });
        foreach (var year in years)
        {
            var percent = year.count * 1000 / nbDocs;
            var countString = $"({year.count})".PadLeft(4, ' ');
            <dd class="percentage percentage-@percent"><span class="text">@year.key @countString</span></dd>
        }
    }
</dl>

<h2>Meilleurs mois</h2>

<dl>
    @{
        var months = Context.Outputs.FromPipeline(nameof(Posts))
            .GroupBy(x => DateTime.Parse((string)x[CustomKeys.Date]).ToString("MMMM yyyy"))
        .OrderByDescending(x => x.Count())
        .Select(x => new { key = x.Key, count = x.Count() });

        foreach (var month in months.Take(5))
        {
            var percent = month.count * 10;
            var countString = $"({month.count})".PadLeft(4, ' ');
            <dd class="percentage percentage-@percent"><span class="text">@month.key @countString</span></dd>
        }
    }
</dl>

<h2>Ball</h2>

<dl>
    @{
        var balls = Context.Outputs.FromPipeline(nameof(Posts))
            .GroupBy(x => (string)x[CustomKeys.Ball])
            .OrderByDescending(x => x.Count())
            .Select(x => (key: x.Key, count: x.Count()));

        foreach (var ball in balls)
        {
            var percent = ball.count * 1000 / nbDocs;
            var countString = $"({ball.count})".PadLeft(4, ' ');
            var ballImage = Context.GetLink($"/assets/img/balls/{ball.key}.png");
            <dd class="percentage percentage-@percent">
                <span class="text">
                    <img class="ball-icon" src="@ballImage" alt="@ball.key" title="@ball.key" /> @countString
                </span>
            </dd>
        }
    }
</dl>
